Project rental_house_fastapi {
  database: 'PostgreSQL'
  Note: 'Backend for a rental house application using FastAPI.'
}


/////////////////////////
//    Account App     //
///////////////////////


TableGroup auth {
  auth.user
  auth.profile
  auth.role
  auth.user_role
  auth.permission
  auth.role_permission
}

Table auth.user {
    id               int           [pk, increment, note: 'Primary key']
    username         varchar(255)  [unique, not null, note: 'Unique username']
    email            varchar(255)  [unique, not null, note: 'Unique email address']
    hashed_password  varchar(255)  [not null, note: 'Hashed password']
    is_active        boolean       [default: true, note: 'Indicates if the user is active']
    is_verified      boolean       [default: false, note: 'Indicates if the user is verified']
    created_at       timestamp     [default: `current_timestamp`, note: 'Record creation timestamp']
    updated_at       timestamp     [default: `current_timestamp`, note: 'Record update timestamp']

    Note: 'Table to store user credentials and status'
}

Table auth.profile {
    id               int           [pk, increment, note: 'Primary key']
    user_id          int           [ref: - auth.user.id, unique, note: 'Foreign key referencing users table']
    full_name        varchar(255)  [null, note: 'Full name of the user']
    bio              text          [null, note: 'Short biography of the user']
    avatar_url       varchar(255)  [null, note: 'URL to the user\'s avatar']
    location         varchar(255)  [null, note: 'Location of the user']
    birthdate        date          [null, note: 'Birthdate of the user']
    created_at       timestamp     [default: `current_timestamp`, note: 'Record creation timestamp']
    updated_at       timestamp     [default: `current_timestamp`, note: 'Record update timestamp']

    Note: 'Table to store additional user profile information'
}

Table auth.role {
    id               int           [pk, increment, note: 'Primary key']
    name             varchar(50)   [unique, not null, note: 'Role name (e.g., admin, user, moderator)']
    description      text          [note: 'Description of the role']
    created_at       timestamp     [default: `current_timestamp`, note: 'Record creation timestamp']
    updated_at       timestamp     [default: `current_timestamp`, note: 'Record update timestamp']

    Note: 'Table to store user roles'
}

Table auth.user_role {
    id               int           [pk, increment, note: 'Primary key']
    user_id          int           [ref: > auth.user.id, note: 'Foreign key referencing users table']
    role_id          int           [ref: > auth.role.id, note: 'Foreign key referencing roles table']
    created_at       timestamp     [default: `current_timestamp`, note: 'Record creation timestamp']

    Note: 'Table to assign roles to users'
}

Table auth.permission {
    id               int           [pk, increment, note: 'Primary key']
    name             varchar(50)   [unique, not null, note: 'Permission name (e.g., read, write, delete)']
    description      text          [note: 'Description of the permission']
    created_at       timestamp     [default: `current_timestamp`, note: 'Record creation timestamp']
    updated_at       timestamp     [default: `current_timestamp`, note: 'Record update timestamp']

    Note: 'Table to store permissions'
}

Table auth.role_permission {
    id               int           [pk, increment, note: 'Primary key']
    role_id          int           [ref: > auth.role.id, note: 'Foreign key referencing roles table']
    permission_id    int           [ref: > auth.permission.id, note: 'Foreign key referencing permissions table']
    created_at       timestamp     [default: `current_timestamp`, note: 'Record creation timestamp']

    Note: 'Table to assign permissions to roles'
}

Table auth.token {
    id               int           [pk, increment, note: 'Primary key']
    user_id          int           [ref: > auth.user.id, note: 'Foreign key referencing users table']
    refresh_token    varchar(255)  [unique, not null, note: 'Refresh token for the user']
    expires_at       timestamp     [not null, note: 'Expiration time of the refresh token']
    created_at       timestamp     [default: `current_timestamp`, note: 'Record creation timestamp']
    updated_at       timestamp     [default: `current_timestamp`, note: 'Record update timestamp']

    Note: 'Table to store JWT refresh tokens'
}

Table auth.activity_logs {
    id               int           [pk, increment, note: 'Primary key']
    user_id          int           [ref: > auth.user.id, note: 'Foreign key referencing users table']
    action           varchar(255)  [not null, note: 'Description of the action performed']
    ip_address       varchar(45)   [note: 'IP address from where the action was performed']
    user_agent       text          [note: 'User agent string of the client']
    created_at       timestamp     [default: `current_timestamp`, note: 'Timestamp of the action']

    Note: 'Table to store logs of user activities'
}

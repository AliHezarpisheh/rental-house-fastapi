[tool.poetry]
name = "rental-house-fastapi"
version = "0.1.0"
description = "Backend for a rental house application using FastAPI."
authors = ["alihezarpisheh <alihezarpisheh@outlook.com>"]
license = "MIT"
readme = "README.md"
package-mode=false

[tool.poetry.dependencies]
python = "^3.10"
httpx = "^0.27.0"
tomlkit = "^0.12.5"
sqlalchemy = {extras = ["mypy"], version = "^2.0.31"}
fastapi = "^0.111.0"
pydantic-settings = "^2.3.3"
asyncpg = "^0.29.0"
coloredlogs = "^15.0.1"
uvloop = "^0.19.0"
httptools = "^0.6.1"
orjson = "^3.10.6"
bcrypt = "^4.2.0"
redis = "^5.0.8"
pyotp = "^2.9.0"
pyjwt = {extras = ["crypto"], version = "^2.10.1"}
celery = "^5.4.0"
flower = "^2.0.1"
celery-types = "^0.22.0"
python-multipart = "^0.0.20"


[tool.poetry.group.development.dependencies]
ruff = "^0.4.10"
mypy = "^1.10.0"
isort = "^5.13.2"
pre-commit = "^3.7.1"


[tool.poetry.group.testing.dependencies]
pytest = "^8.2.2"
pytest-cov = "^5.0.0"
pytest-randomly = "^3.15.0"
pytest-asyncio = "^0.23.7"
pytest-env = "^1.1.5"
tox = "^4.15.1"
pytest-order = "^1.3.0"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
line-length = 88
lint.select = [
    "E",  # pycodestyle
    "W",  # pycodestyle
    "F",  # pyflakes
    "UP",  # pyupgrade
    "C90",  # mccabe
    "D",  # pydocstyle
    "I",  # isort
    "RUF",  # Ruff specific rules
]
lint.ignore = ["D104"]
lint.exclude = ["*/alembic/*"]

lint.fixable = [
    "F401",  # Remove unused imports.
    "RUF100",  # Remove unused noqa comments.
]

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["F401"]
"*/routers/**/*.py" = ["D301", "D411"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"


[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true


[tool.mypy]
strict = true
ignore_missing_imports = true

plugins = ["sqlalchemy.ext.mypy.plugin", "pydantic.mypy"]

exclude = "tests/"


[tool.pytest.ini_options]
addopts = [
    "--strict-markers",
    "--strict-config",
    "-ra",
    "-v",
]
markers = [
    "smoke: Tests focusing on essential and critical functionality",
    "exception: Tests checking how the application handles exceptions and error scenarios",
    "asyncio: Asynchronous tests using the pytest-asyncio plugin",
]
required_plugins = [
    "pytest-randomly",
    "pytest-cov",
    "pytest-env",
]

testpaths = "tests"
xfail_strict = true

asyncio_mode = "auto"

filterwarnings = ["ignore::PendingDeprecationWarning:starlette.*"]


[tool.pytest_env]
ENV = "testing"


[tool.coverage.run]
parallel = true
source = [
    "app",
    "toolkit",
]
